services:
  db:
    image: postgres:16-bullseye
    container_name: db
    restart: unless-stopped
    ports:
      - "54321:${DB_PORT:-5432}"
    environment:
      - POSTGRES_DB=${DB_NAME:-api}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-api}']
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - task

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "6380:${REDIS_PORT:-6379}"
    command: redis-server
    volumes:
      - redis_data:/data
    networks:
      - task

  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: api
    hostname: api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
    entrypoint: > 
      bash -c "
        python3 manage.py collectstatic --noinput
        python3 manage.py migrate
        gunicorn settings.wsgi:application --bind 0.0.0.0:8000 --reload --workers 1
      "
    volumes:
      - ./api/:/opt/app
    networks:
      - task

  celery:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: celery
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./api/:/opt/app
    entrypoint: bash -c "celery -A settings worker -l INFO"
    depends_on:
      - api
    networks:
      - task
  
  scheduler:
    build:
      context: .
      dockerfile: ./api/Dockerfile
    container_name: scheduler
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./api/:/opt/app
    entrypoint: bash -c "celery -A settings beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - celery
    networks:
      - task

networks:
  task:
    driver: bridge

volumes:
  postgres_data:
  redis_data: